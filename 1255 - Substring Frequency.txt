......................................
......... Name : Misu Dey  ...........
......... University: CUET ...........
......... Id : 1404108     ...........
......................................

#include<bits/stdc++.h>
#define ll long long
#define pb push_back
#define fr(i,a,b) for(int i=a;i<=b;i++)
#define re_fr(i,a,b) for(int i=a;i>=b;i--)
#define frl(i,a,b) for(ll i=a;i<=b;i++)
#define re_frl(i,a,b) for(ll i=a;i>=b;i--)
#define mp make_pair
#define F first
#define S second
#define MX 5000010
#define eps 1e-9
#define PI acos(-1)
#define inf 1e18
#define pll pair<ll,ll>
//#define mod 1000000007
#define mod2 100000000
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))
#define PI acos(-1)
#define fast() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;
int failure[1000010];
map<ll,ll>Map;
ll ans=0;
 
void build_failure_function(string pattern, int m) {
  failure[0] = 0;
  failure[1] = 0; //base case
 
  for(int i = 2; i <= m; i++) {  //i is length of the prefix we are dealing with
    // j is the index of the largest next partial match
    // (the largest suffix/prefix) of the string under index i - 1
    int j = failure[i - 1];
    while(true) {
      // check if the last character of prefix of length i "expands" the current "candidate"
      if(pattern[j] == pattern[i - 1]) {
        failure[i] = j + 1;
        break;
      }
      // if we cannot "expand" even the empty string
      if(j == 0) {
          failure[i] = 0;
          break;
      }
      // else go to the next best "candidate" partial match
      j = failure[j];
    }
    //cout<<failure[i]<<endl;
  }
}
bool kmp(string text, string pattern)
{
  int n = text.size();
  int m = pattern.size();
  build_failure_function(pattern, m);
 
  int i = 0; // the initial state of the automaton is
         // the empty string
 
  int j = 0; // the first character of the text
 
  while(true) {
    if(j == n) {
        return false; //reached the end of the text
    }
 
    // character matched
    if(text[j] == pattern[i]) {
      i++; // change the state of the automaton
      j++; // get the next character from the text
      if(i == m) {
 
          ans++;
          i=failure[i]; // we will try to match only the last character
      }
    } else {
        if (i == 0) {
            // if we reached the empty string and failed to
            // "expand" even it; we go to the next
            // character from the text, the state of the
            // automaton remains zero
            j++;
        }
        else {
             //we try to "expand" the next best (largest) match
            i = failure[i];
        }
    }
  }
  return false;
}
 
int main()
{
 
    ll t; cin>>t;
    string text,pattern;
    for(ll ka=1;ka<=t;ka++)
    {
    ans=0;
    cin>>text>>pattern;
    kmp(text,pattern);
    cout<<"Case "<<ka<<": "<<ans<<endl;
 
    }
 
 
}